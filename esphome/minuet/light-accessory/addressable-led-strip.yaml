# MINUET LIGHT ACCESSORY PACKAGE
# VARIANT: ADDRESSABLE LED STRIP
# SUPPORTED HARDWARE: Minuet Light Accessory v3.0
#
# Supports an addressable LED strip connected to the accessory board.
# Refer to the accessory documentation for details.
#
# Include the contents of this file into your device configuration YAML
# file as a package like this (recommended):
#
# packages:
#   <<: !include
#     file: minuet/light-accessory/addressable-led-strip.yaml
#     vars:
#       name: 'Light'
#       num_leds: 19
#       chipset: WS2811
#       rgb_order: RGB
#       is_wrgb: true
#       is_rgbw: false
minuet_light:
  # Shutdown behavior: The power_supply component automatically turns the light off
  # before ESPHome restarts.
  power_supply:
    - id: minuet_light_power
      pin:
        number: 6
        mode: output
      enable_time: 10ms
      keep_on_time: 5s
  light:
    - id: minuet_light
      name: ${name}
      platform: esp32_rmt_led_strip
      pin: 5
      restore_mode: ALWAYS_OFF
      num_leds: ${num_leds}
      chipset: ${chipset}
      rgb_order: ${rgb_order}
      is_wrgb: ${is_wrgb}
      is_rgbw: ${is_rgbw}
      power_supply: minuet_light_power
      default_transition_length: 0.5s
      gamma_correct: 1.4
      color_correct: [1, 0.9, 0.9, 1]
      effects:
        - addressable_rainbow:
        - addressable_twinkle:
        - pulse:
        - lambda:
            name: Fade
            update_interval: 20ms
            lambda: |-
              auto color = esphome::light::ESPHSVColor((millis() / 80) & 0xff, 255, 255).to_rgb();
              id(minuet_light).make_call()
                  .set_transition_length(0)
                  .set_color_brightness(1.f)
                  .set_color_mode(esphome::light::ColorMode::RGB_WHITE)
                  .set_rgbw(color.r / 255.f, color.g / 255.f, color.b / 255.f, 0.f)
                  .set_publish(false)
                  .perform();
        - lambda:
            name: Random
            update_interval: 7s
            lambda: |-
              auto color = esphome::light::ESPHSVColor(random_uint32() & 0xff, 255, 255).to_rgb();
              id(minuet_light).make_call()
                  .set_transition_length(1000)
                  .set_color_brightness(1.f)
                  .set_color_mode(esphome::light::ColorMode::RGB_WHITE)
                  .set_rgbw(color.r / 255.f, color.g / 255.f, color.b / 255.f, 0.f)
                  .set_publish(false)
                  .perform();
      on_state:
        then:
          lambda: |-
            // Some effects don't clear the white channel when changing colors which makes the
            // effect overly bright so we clear the white channel and restart the effect.
            auto& light = id(minuet_light);
            const auto& values = light->remote_values;
            if (values.get_white() != 0.f) {
              std::string effect = light->get_effect_name();
              if (effect == "Rainbow") {
                ESP_LOGD("minuet", "Clear white channel for RGBW unaware light effect: %s", effect.c_str());
                //light->make_call()
                //    .set_transition_length(0.f)
                //    .set_color_mode(esphome::light::ColorMode::RGB_WHITE)
                //    .set_color_brightness(1.f)
                //    .set_rgbw(1.f, 0.f, 0.f, 0.f).perform();
                static_cast<AddressableLight*>(light->get_output())->all().set_white(0.f);
              }
            }

<<: !include common.yaml
